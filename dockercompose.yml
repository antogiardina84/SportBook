version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sportbook-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sportbook
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sportbook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sportbook-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sportbook-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: sportbook-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/sportbook?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_REFRESH_SECRET: your-refresh-secret-key-change-this
      JWT_EXPIRE: 15m
      SESSION_SECRET: your-session-secret-key-change-this
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_placeholder}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-pk_test_placeholder}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_placeholder}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-your-email@gmail.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-your-password}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@sportbook.com}
      FROM_NAME: ${FROM_NAME:-SportBook}
      FRONTEND_URL: http://localhost:3000
      ADMIN_URL: http://localhost:3001
    ports:
      - "5000:5000"
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - ./backend/logs:/app/logs
      - backend_uploads:/app/uploads
      - /app/node_modules
    networks:
      - sportbook-network
    command: sh -c "npx prisma migrate deploy && npx prisma db seed && npm run dev"

  # Frontend (Optional - uncomment when ready)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: sportbook-frontend
  #   restart: unless-stopped
  #   depends_on:
  #     - backend
  #   environment:
  #     REACT_APP_API_URL: http://localhost:5000/api
  #     REACT_APP_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend/src:/app/src
  #     - /app/node_modules
  #   networks:
  #     - sportbook-network

  # Nginx Reverse Proxy (Optional for production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: sportbook-nginx
  #   restart: unless-stopped
  #   depends_on:
  #     - backend
  #     - frontend
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - sportbook-network

  # Prisma Studio (Database GUI)
  prisma-studio:
    image: node:18-alpine
    container_name: sportbook-prisma-studio
    working_dir: /app
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/sportbook?schema=public
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    networks:
      - sportbook-network
    command: sh -c "npm install && npx prisma studio --port 5555 --hostname 0.0.0.0"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  sportbook-network:
    driver: bridge